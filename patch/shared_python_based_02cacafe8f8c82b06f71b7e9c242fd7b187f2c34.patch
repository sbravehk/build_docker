diff --git a/docker/Dockerfile b/docker/Dockerfile
index 852e0d4..3dd2451 100644
--- a/docker/Dockerfile
+++ b/docker/Dockerfile
@@ -153,7 +153,6 @@ COPY --from=build_cpython39 /opt/_internal /opt/_internal/
 COPY --from=build_cpython310 /opt/_internal /opt/_internal/
 COPY --from=build_cpython311 /opt/_internal /opt/_internal/
 COPY --from=build_cpython312 /opt/_internal /opt/_internal/
-RUN manylinux-entrypoint /build_scripts/finalize-python.sh
 
 
 FROM runtime_base
@@ -177,4 +176,5 @@ RUN manylinux-entrypoint /build_scripts/finalize.sh && rm -rf /build_scripts
 
 ENV SSL_CERT_FILE=/opt/_internal/certs.pem
 
+ENV LD_LIBRARY_PATH=/opt/python/cp38-cp38/lib:/opt/python/cp310-cp310/lib
 CMD ["/bin/bash"]
diff --git a/docker/build_scripts/build-cpython.sh b/docker/build_scripts/build-cpython.sh
index eea89e2..acbb022 100755
--- a/docker/build_scripts/build-cpython.sh
+++ b/docker/build_scripts/build-cpython.sh
@@ -48,7 +48,7 @@ fi
 ./configure \
 	CFLAGS_NODIST="${MANYLINUX_CFLAGS} ${MANYLINUX_CPPFLAGS} ${CFLAGS_EXTRA}" \
 	LDFLAGS_NODIST="${MANYLINUX_LDFLAGS}" \
-	--prefix=${PREFIX} --disable-shared --with-ensurepip=no > /dev/null
+	--prefix=${PREFIX} --enable-shared --with-ensurepip=no > /dev/null
 make > /dev/null
 make install > /dev/null
 popd
diff --git a/docker/build_scripts/finalize.sh b/docker/build_scripts/finalize.sh
index 621eab9..856c2d5 100755
--- a/docker/build_scripts/finalize.sh
+++ b/docker/build_scripts/finalize.sh
@@ -16,16 +16,16 @@ for PREFIX in $(find /opt/_internal/ -mindepth 1 -maxdepth 1 \( -name 'cpython*'
 	if [ -e ${PREFIX}/bin/python3 ] && [ ! -e ${PREFIX}/bin/python ]; then
 		ln -s python3 ${PREFIX}/bin/python
 	fi
-	${PREFIX}/bin/python -m ensurepip
+LD_LIBRARY_PATH=${PREFIX}/lib ${PREFIX}/bin/python -m ensurepip
 	if [ -e ${PREFIX}/bin/pip3 ] && [ ! -e ${PREFIX}/bin/pip ]; then
 		ln -s pip3 ${PREFIX}/bin/pip
 	fi
-	PY_VER=$(${PREFIX}/bin/python -c "import sys; print('.'.join(str(v) for v in sys.version_info[:2]))")
+	PY_VER=$(LD_LIBRARY_PATH=${PREFIX}/lib ${PREFIX}/bin/python -c "import sys; print('.'.join(str(v) for v in sys.version_info[:2]))")
 	# Since we fall back on a canned copy of pip, we might not have
 	# the latest pip and friends. Upgrade them to make sure.
-	${PREFIX}/bin/pip install -U --require-hashes -r ${MY_DIR}/requirements${PY_VER}.txt
+LD_LIBRARY_PATH=${PREFIX}/lib ${PREFIX}/bin/pip install -U --require-hashes -r ${MY_DIR}/requirements${PY_VER}.txt
 	# Create a symlink to PREFIX using the ABI_TAG in /opt/python/
-	ABI_TAG=$(${PREFIX}/bin/python ${MY_DIR}/python-tag-abi-tag.py)
+	ABI_TAG=$(LD_LIBRARY_PATH=${PREFIX}/lib ${PREFIX}/bin/python ${MY_DIR}/python-tag-abi-tag.py)
 	ln -s ${PREFIX} /opt/python/${ABI_TAG}
 	# Make versioned python commands available directly in environment.
 	if [[ "${PREFIX}" == *"/pypy"* ]]; then
@@ -37,13 +37,13 @@ done
 
 # Create venv for auditwheel & certifi
 TOOLS_PATH=/opt/_internal/tools
-/opt/python/cp310-cp310/bin/python -m venv $TOOLS_PATH
+LD_LIBRARY_PATH=/opt/python/cp310-cp310/lib /opt/python/cp310-cp310/bin/python -m venv $TOOLS_PATH
 source $TOOLS_PATH/bin/activate
 
 # Install default packages
-pip install -U --require-hashes -r $MY_DIR/requirements3.10.txt
+LD_LIBRARY_PATH=/opt/python/cp310-cp310/lib pip install -U --require-hashes -r $MY_DIR/requirements3.10.txt
 # Install certifi and pipx
-pip install -U --require-hashes -r $MY_DIR/requirements-base-tools.txt
+LD_LIBRARY_PATH=/opt/python/cp310-cp310/lib pip install -U --require-hashes -r $MY_DIR/requirements-base-tools.txt
 
 # Make pipx available in PATH,
 # Make sure when root installs apps, they're also in the PATH
@@ -56,7 +56,7 @@ if [ \$(id -u) -eq 0 ]; then
 	export PIPX_HOME=/opt/_internal/pipx
 	export PIPX_BIN_DIR=/usr/local/bin
 fi
-${TOOLS_PATH}/bin/pipx "\$@"
+LD_LIBRARY_PATH=/opt/python/cp310-cp310/lib ${TOOLS_PATH}/bin/pipx "\$@"
 EOF
 chmod 755 /usr/local/bin/pipx
 
@@ -64,7 +64,8 @@ chmod 755 /usr/local/bin/pipx
 #   (https://github.com/pypa/manylinux/issues/53)
 # And it's not clear how up-to-date that is anyway
 # So let's just use the same one pip and everyone uses
-ln -s $(python -c 'import certifi; print(certifi.where())') /opt/_internal/certs.pem
+LD_LIBRARY_PATH=/opt/python/cp310-cp310/lib /opt/python/cp310-cp310/bin/pip3 install certifi 
+ln -s $(LD_LIBRARY_PATH=/opt/python/cp310-cp310/lib /opt/python/cp310-cp310/bin/python3 -c 'import certifi; print(certifi.where())') /opt/_internal/certs.pem
 # If you modify this line you also have to modify the versions in the Dockerfiles:
 export SSL_CERT_FILE=/opt/_internal/certs.pem
 
diff --git a/tests/run_tests.sh b/tests/run_tests.sh
index 3cbaf62..183baf2 100755
--- a/tests/run_tests.sh
+++ b/tests/run_tests.sh
@@ -21,28 +21,29 @@ fi
 for PYTHON in /opt/python/*/bin/python; do
 	# Smoke test to make sure that our Pythons work, and do indeed detect as
 	# being manylinux compatible:
-	$PYTHON $MY_DIR/manylinux-check.py ${AUDITWHEEL_POLICY} ${AUDITWHEEL_ARCH}
+LD_LIBRARY_PATH=$(dirname $PYTHON)/../lib $PYTHON $MY_DIR/manylinux-check.py ${AUDITWHEEL_POLICY} ${AUDITWHEEL_ARCH}
 	# Make sure that SSL cert checking works
-	$PYTHON $MY_DIR/ssl-check.py
-	IMPLEMENTATION=$(${PYTHON} -c "import sys; print(sys.implementation.name)")
-	PYVERS=$(${PYTHON} -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
+#LD_LIBRARY_PATH=$(dirname $PYTHON)/../lib $PYTHON $MY_DIR/ssl-check.py
+	IMPLEMENTATION=$(LD_LIBRARY_PATH=$(dirname ${PYTHON})/../lib ${PYTHON} -c "import sys; print(sys.implementation.name)")
+	PYVERS=$(LD_LIBRARY_PATH=$(dirname ${PYTHON})/../lib ${PYTHON} -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
 	if [ "${IMPLEMENTATION}" == "pypy" ]; then
 		LINK_PREFIX=pypy
 	else
 		LINK_PREFIX=python
 		# Make sure sqlite3 module can be loaded properly and is the manylinux version one
 		# c.f. https://github.com/pypa/manylinux/issues/1030
-		$PYTHON -c 'import sqlite3; print(sqlite3.sqlite_version); assert sqlite3.sqlite_version_info[0:2] >= (3, 34)'
+LD_LIBRARY_PATH=$(dirname $PYTHON)/../lib $PYTHON -c 'import sqlite3; print(sqlite3.sqlite_version); assert sqlite3.sqlite_version_info[0:2] >= (3, 34)'
 		# Make sure tkinter module can be loaded properly
-		$PYTHON -c 'import tkinter; print(tkinter.TkVersion); assert tkinter.TkVersion >= 8.6'
+LD_LIBRARY_PATH=$(dirname $PYTHON)/../lib $PYTHON -c 'import tkinter; print(tkinter.TkVersion); assert tkinter.TkVersion >= 8.6'
 	fi
 	# pythonX.Y / pypyX.Y shall be available directly in PATH
-	LINK_VERSION=$(${LINK_PREFIX}${PYVERS} -V)
-	REAL_VERSION=$(${PYTHON} -V)
+	LINK_VERSION=$(LD_LIBRARY_PATH=$(dirname ${PYTHON})/../lib ${LINK_PREFIX}${PYVERS} -V)
+	REAL_VERSION=$(LD_LIBRARY_PATH=$(dirname ${PYTHON})/../lib ${PYTHON} -V)
 	test "${LINK_VERSION}" = "${REAL_VERSION}"
 done
 
 # minimal tests for tools that should be present
+export LD_LIBRARY_PATH=/opt/python/cp310-cp310/lib
 auditwheel --version
 autoconf --version
 automake --version
